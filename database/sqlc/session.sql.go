// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
insert into sessions (
    user_id,
    access_token,
    refresh_token,
    access_token_expires_at,
    refresh_token_expires_at,
    is_active,
    ip,
    user_agent
) values (
    $1, $2, $3, $4, $5, $6, $7, $8
) returning id, user_id, access_token, refresh_token, access_token_expires_at, refresh_token_expires_at, is_active, ip, user_agent, logged_out, created_at, updated_at
`

type CreateSessionParams struct {
	UserID                int64              `json:"user_id"`
	AccessToken           string             `json:"access_token"`
	RefreshToken          string             `json:"refresh_token"`
	AccessTokenExpiresAt  pgtype.Timestamptz `json:"access_token_expires_at"`
	RefreshTokenExpiresAt pgtype.Timestamptz `json:"refresh_token_expires_at"`
	IsActive              pgtype.Bool        `json:"is_active"`
	Ip                    pgtype.Text        `json:"ip"`
	UserAgent             pgtype.Text        `json:"user_agent"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UserID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.AccessTokenExpiresAt,
		arg.RefreshTokenExpiresAt,
		arg.IsActive,
		arg.Ip,
		arg.UserAgent,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.IsActive,
		&i.Ip,
		&i.UserAgent,
		&i.LoggedOut,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSessions = `-- name: DeleteSessions :exec
delete from sessions
where id = $1
`

func (q *Queries) DeleteSessions(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSessions, id)
	return err
}

const getUserSessions = `-- name: GetUserSessions :many
select id, user_id, access_token, refresh_token, access_token_expires_at, refresh_token_expires_at, is_active, ip, user_agent, logged_out, created_at, updated_at from sessions
where
    user_id = $1
    AND
    is_active = $2
limit $4
offset $3
`

type GetUserSessionsParams struct {
	UserID   int64       `json:"user_id"`
	IsActive pgtype.Bool `json:"is_active"`
	Offset   int32       `json:"offset"`
	Limit    int32       `json:"limit"`
}

func (q *Queries) GetUserSessions(ctx context.Context, arg GetUserSessionsParams) ([]Session, error) {
	rows, err := q.db.Query(ctx, getUserSessions,
		arg.UserID,
		arg.IsActive,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AccessToken,
			&i.RefreshToken,
			&i.AccessTokenExpiresAt,
			&i.RefreshTokenExpiresAt,
			&i.IsActive,
			&i.Ip,
			&i.UserAgent,
			&i.LoggedOut,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :one
update sessions
set
    logged_out = current_timestamp,
    updated_at = current_timestamp
where
    id = $1
returning id, user_id, access_token, refresh_token, access_token_expires_at, refresh_token_expires_at, is_active, ip, user_agent, logged_out, created_at, updated_at
`

func (q *Queries) UpdateSession(ctx context.Context, id int64) (Session, error) {
	row := q.db.QueryRow(ctx, updateSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.IsActive,
		&i.Ip,
		&i.UserAgent,
		&i.LoggedOut,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
