// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: verification_code.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVerificationCode = `-- name: CreateVerificationCode :one
insert into verification_codes (
    user_id,
    code,
    expires_at
) values (
    $1, $2, $3
) returning id, user_id, code, expires_at, is_used, created_at, updated_at
`

type CreateVerificationCodeParams struct {
	UserID    int64              `json:"user_id"`
	Code      string             `json:"code"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateVerificationCode(ctx context.Context, arg CreateVerificationCodeParams) (VerificationCode, error) {
	row := q.db.QueryRow(ctx, createVerificationCode, arg.UserID, arg.Code, arg.ExpiresAt)
	var i VerificationCode
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Code,
		&i.ExpiresAt,
		&i.IsUsed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateVerificationCodeStatus = `-- name: UpdateVerificationCodeStatus :one
update verification_codes
set
    is_used = $2,
    updated_at = current_timestamp
where id = $1
returning id, user_id, code, expires_at, is_used, created_at, updated_at
`

type UpdateVerificationCodeStatusParams struct {
	ID     int64 `json:"id"`
	IsUsed bool  `json:"is_used"`
}

func (q *Queries) UpdateVerificationCodeStatus(ctx context.Context, arg UpdateVerificationCodeStatusParams) (VerificationCode, error) {
	row := q.db.QueryRow(ctx, updateVerificationCodeStatus, arg.ID, arg.IsUsed)
	var i VerificationCode
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Code,
		&i.ExpiresAt,
		&i.IsUsed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
